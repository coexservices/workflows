name: Validate PR

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      build_args:
        required: false
        type: string
        default: ''
      check_all_commit_msg:
        required: false
        type: boolean
        default: true
      docker_namespace:
        required: false
        type: string
        default: 'syd.ocir.io/coexservices01'
      java_version:
        required: false
        type: string
        default: '17'

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Project Step Calculator
        run: |
          echo "HAS_GRADLE=$( [ -f build.gradle ] && echo true || echo false )" >> $GITHUB_ENV
          echo "HAS_MAVEN=$( [ -f pom.xml ] && echo true || echo false )" >> $GITHUB_ENV
          echo "SNYK_AUTH_TOKEN=${{ secrets.SNYK_AUTH_TOKEN }}" >> $GITHUB_ENV

      # SNYK
      - uses: snyk/actions/setup@master
      - name: 'Authenticate Snyk CLI'
        run: snyk auth ${SNYK_AUTH_TOKEN}

      # GRADLE
      - name: Set up JDK ${{ inputs.java_version }}
        if: env.HAS_GRADLE == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: '${{ inputs.java_version }}'
          distribution: 'temurin'
      - name: 'Setup github packages gradle settings file'
        if: env.HAS_GRADLE == 'true'
        run: |
          mkdir -p $HOME/.gradle
          echo "allprojects { repositories { mavenCentral(); maven { name \"GitHubPackages\"; url uri(\"https://maven.pkg.github.com/coexservices/*\"); credentials { username githubRepoActor; password githubRepoToken } } } }" > ~/.gradle/init.gradle
          echo "githubRepoActor=${{ secrets.CES_GITHUB_PACKAGES_READ_ACTOR }}" > ~/.gradle/gradle.properties
          echo "githubRepoToken=${{ secrets.CES_GITHUB_PACKAGES_READ_TOKEN }}" >> ~/.gradle/gradle.properties
      - name: Setup Gradle
        if: env.HAS_GRADLE == 'true'
        uses: gradle/gradle-build-action@v2
      - name: "Build with Gradle | version: ${{ github.run_number }}"
        if: env.HAS_GRADLE == 'true'
        run: |
          ./gradlew clean build -Pversion=${{github.run_number}} ${{ inputs.build_args }}
        env:
          GITHUB_USERNAME: ${{ secrets.CES_GITHUB_PACKAGES_READ_ACTOR }}
          GITHUB_PASSWORD: ${{ secrets.CES_GITHUB_PACKAGES_READ_TOKEN }}
      - name: Publish JUnit Test Report
        uses: mikepenz/action-junit-report@v3
        if: env.HAS_GRADLE == 'true' && always() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      # MAVEN
      - name: Set up JDK ${{ inputs.java_version }}
        if: env.HAS_MAVEN == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: '${{ inputs.java_version }}'
          distribution: 'temurin'
          cache: maven

      - name: 'Setup github packages maven settings file'
        if: env.HAS_MAVEN == 'true'
        uses: whelk-io/maven-settings-xml-action@v21
        with:
          repositories: '[ { "id": "github", "url": "https://maven.pkg.github.com/coexservices/*" } ]'
          servers: '[ { "id": "github", "username": "${GITHUB_ACTOR}", "password": "${GITHUB_TOKEN}" } ]'

      - name: "Build with Maven | version: ${{ github.run_number }}"
        if: env.HAS_MAVEN == 'true'
        run: |
          mvn --batch-mode versions:set -DnewVersion=${{ github.run_number }}
          mvn --batch-mode clean install ${{ inputs.build_args }}
        env:
          GITHUB_ACTOR: ${{ secrets.CES_GITHUB_PACKAGES_READ_ACTOR }}
          GITHUB_TOKEN: ${{ secrets.CES_GITHUB_PACKAGES_READ_TOKEN }}

      - name: Publish JUnit Test Report
        uses: mikepenz/action-junit-report@v3
        if: env.HAS_MAVEN == 'true' && always() # always run even if the previous step fails
        with:
          report_paths: '**/target/surefire-reports/TEST-*.xml'
