name: Validate PR

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      docker_namespace:
        required: true
        type: string
      java_version:
        required: true
        type: string
    secrets:
      snyk_auth_token:
        required: true
      github_repo_actor:
        required: true
      github_repo_token:
        required: true
      docker_username:
        required: true
      docker_password:
        required: true
  workflow_dispatch:

env:
  DOCKER_NAMESPACE: ${{ inputs.docker_namespace }}
  DOCKER_REPO: ${{ inputs.app_name }}

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Check PR and commit formats
      uses: gsactions/commit-message-checker@v1
      if: github.event_name != 'workflow_dispatch'
      with:
        pattern: '^[A-Z][A-Z0-9]+-[0-9]+: .*$'
        error: |
          Your commit message and your PR title must follow the format of 'JIRA-123: ' 
          Did you forget to add your jira?
          Did you follow the correct format?
          
          Please follow this format so Jira can auto detect what is in each release.
          The regex is '^[A-Z][A-Z0-9]+-[0-9]+: .*$'
        checkAllCommitMessages: true
        accessToken: ${{ secrets.GITHUB_TOKEN }} # github access token is only required if checkAllCommitMessages is true

    - name: Project Step Calculator
      run: |
        echo "HAS_K8S_DIR=$( [ -d ./k8s ] && echo true || echo false )"
        echo "HAS_K8S_DIR=$( [ -d ./k8s ] && echo true || echo false )" >> $GITHUB_ENV
        echo "HAS_IAM_DIR=$( [ -d ./iam ] && echo true || echo false )"
        echo "HAS_IAM_DIR=$( [ -d ./iam ] && echo true || echo false )" >> $GITHUB_ENV
        echo "HAS_INFRA_DIR=$( [ -d ./infra ] && echo true || echo false )"
        echo "HAS_INFRA_DIR=$( [ -d ./infra ] && echo true || echo false )" >> $GITHUB_ENV
        echo "HAS_PRE_COMMIT=$( [ -f .pre-commit-config.yaml ] && echo true || echo false )"
        echo "HAS_PRE_COMMIT=$( [ -f .pre-commit-config.yaml ] && echo true || echo false )" >> $GITHUB_ENV
        echo "SNYK_AUTH_TOKEN=${{ secrets.snyk_auth_token }}" >> $GITHUB_ENV

    - name: Set up JDK ${{ inputs.java_version }}
      uses: actions/setup-java@v3
      with:
        java-version: '${{ inputs.java_version }}'
        distribution: 'temurin'

    - name: 'Setup github packages gradle settings file'
      run: |
        mkdir -p $HOME/.gradle
        echo "allprojects { repositories { mavenCentral(); maven { name \"GitHubPackages\"; url uri(\"https://maven.pkg.github.com/coexservices/*\"); credentials { username githubRepoActor; password githubRepoToken } } } }" > ~/.gradle/init.gradle
        echo "githubRepoActor=${{ secrets.github_repo_actor }}" > ~/.gradle/gradle.properties
        echo "githubRepoToken=${{ secrets.github_repo_token }}" >> ~/.gradle/gradle.properties

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    - uses: actions/setup-python@v2
      if: env.HAS_PRE_COMMIT == 'true'
    - uses: cloudposse/github-action-pre-commit@v2.1.2  # run pre-commit
      if: env.HAS_PRE_COMMIT == 'true'
      env:
        GITHUB_ACTOR: ${{ secrets.github_repo_actor }}
        GITHUB_TOKEN: ${{ secrets.github_repo_token }}

    - name: "Build with Gradle | version: ${{ github.run_number }}"
      run: |
        ./gradlew clean build -Pversion=${{github.run_number}}
      env:
        GITHUB_USERNAME: ${{ secrets.github_repo_actor }}
        GITHUB_PASSWORD: ${{ secrets.github_repo_token }}

    - name: "Validate iam terraform"
      if: env.HAS_IAM_DIR == 'true'
      run: |
        cd iam
        terraform init -backend=false
        terraform validate
        cd ../..

    - name: "Validate infra terraform"
      if: env.HAS_INFRA_DIR == 'true'
      run: |
        cd infra
        terraform init -backend=false
        terraform validate
        cd ../..

    - name: Docker Login
      run: |
        docker login ${DOCKER_NAMESPACE} -u ${{ secrets.docker_username }} -p "${{ secrets.docker_password }}"

    - name: "Build iam Docker image"
      if: env.HAS_IAM_DIR == 'true'
      run: |
        docker build \
        -t ${DOCKER_NAMESPACE}/${DOCKER_REPO}_iam:${{github.run_number}} \
        -t ${DOCKER_NAMESPACE}/${DOCKER_REPO}_iam:latest \
        -f Dockerfile.iam \
        .

    - name: "Build infra Docker image"
      if: env.HAS_INFRA_DIR == 'true'
      run: |
        docker build \
        -t ${DOCKER_NAMESPACE}/${DOCKER_REPO}_infra:${{github.run_number}} \
        -t ${DOCKER_NAMESPACE}/${DOCKER_REPO}_infra:latest \
        -f Dockerfile.infra \
        .

    - name: "check sit k8s helm charts"
      if: env.HAS_K8S_DIR == 'true'
      run: |
        docker run --rm \
          -v "$(pwd):/apps" \
          -w /apps \
          syd.ocir.io/coexservices01/alpine/helm:3.9.0 \
          template -f /apps/k8s/values/values.sit.yaml --set "version=${{ github.run_number }}" /apps/k8s/ --debug

    - name: "check uat k8s helm charts"
      if: env.HAS_K8S_DIR == 'true'
      run: |
        docker run --rm \
          -v "$(pwd):/apps" \
          -w /apps \
          syd.ocir.io/coexservices01/alpine/helm:3.9.0 \
          template -f /apps/k8s/values/values.uat.yaml --set "version=${{ github.run_number }}" /apps/k8s/ --debug

    - name: "check prod k8s helm charts"
      if: env.HAS_K8S_DIR == 'true'
      run: |
        docker run --rm \
          -v "$(pwd):/apps" \
          -w /apps \
          syd.ocir.io/coexservices01/alpine/helm:3.9.0 \
          template -f /apps/k8s/values/values.prod.yaml --set "version=${{ github.run_number }}" /apps/k8s/ --debug

    - name: Publish JUnit Test Report
      uses: mikepenz/action-junit-report@v3
      if: always() # always run even if the previous step fails
      with:
        report_paths: '**/build/test-results/test/TEST-*.xml'
